/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import br.com.caelum.stella.validation.InvalidStateException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/*
    partições:
        - score negativo: [1 ... 599]
        - score positivo: [600 ... 1000]
        - score invalido alto: [1001 ..... x]
        - score invalido baixo: [0 ...... -x]
        - cpf valido: [00000000191]
        - cpf invalido:
            - digitos invalidos: [00003211191]
            - não digitos: [0000aa00191]
            - tamanho invalido: [000000191]
 */

public class CreditAnalyzerTest {

    @Test
    public void testUserHasCreditAvailableWhenPositiveScore() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "00000000191";
        Integer userScore = 600;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertTrue(creditAvailable, "User should have credit available");
    }

    @Test
    public void testUserHasNotCreditAvailableWhenInvalidLowScore() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "00000000191";
        Integer userScore = -1;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertFalse(creditAvailable, "User should not have credit available");
    }

    @Test
    public void testUserHasNotCreditAvailableWhenInvalidHighScore() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "00000000191";
        Integer userScore = 1001;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertFalse(creditAvailable, "User should not have credit available");
    }

    @Test
    public void testUserHasCreditAvailableWhenValidDocument() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "45437925050";
        Integer userScore = 750;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertTrue(creditAvailable, "User should have credit available");
    }

    @Test
    public void testUserHasNotCreditAvailableWhenInvalidDocumentDigits() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "00003211191";
        Integer userScore = 750;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertFalse(creditAvailable, "User should not have credit available");
    }

    @Test
    public void testUserHasNotCreditAvailableWhenInvalidDocumentNotDigitsOnly() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "0000aa00191";
        Integer userScore = 750;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertFalse(creditAvailable, "User should not have credit available");
    }

    @Test
    public void testUserHasNotCreditAvailableWhenInvalidDocumentWrongLength() {
        CreditAnalyzer creditAnalyzer = CreditAnalyzer;
        String userDocument = "000000191";
        Integer userScore = 750;

        boolean creditAvailable = creditAnalyzer.validateCreditAvailable(userDocument, userScore);
        assertFalse(creditAvailable, "User should not have credit available");
    }
}
